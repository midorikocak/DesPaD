package AST;

import java.io.BufferedReader;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.FilenameFilter;
import java.io.PrintWriter;
import java.util.ArrayList;
import java.util.List;

public class OutputFilesFindOverlaps {
	
	public void ParseOutputs(String Title, File f) {
		
		final List<String> subgraph = new ArrayList<String>();		
		final List<Vertices> subgraph_concat = new ArrayList<Vertices>();
	    
		FilenameFilter textFilter = new FilenameFilter() {
	        public boolean accept(File dir, String name) {
	            return name.toLowerCase().endsWith(".g");
	        }
	    };
	    
	    String fileName="";
	    
	    Integer i = 1;
	    File[] files2 = f.listFiles(textFilter);
	    //dosyalari listeye atma islemi.
	    for (File file : files2) 
	    {
	    	subgraph.clear();
	        if (file.isDirectory()) 
	        {
	            System.out.print("directory:");
	        } 
	        else 
	        {
	            //System.out.println("File:"+file.getName());
	            fileName = f + "/" + file.getName();
  
	    		try{

	    			//Create object of FileReader
	    			FileReader inputFile = new FileReader(fileName);
	    			BufferedReader bufferReader = new BufferedReader(inputFile);

	    			String line;

	    			// Read file line by line and print on the console
	    			while ((line = bufferReader.readLine()) != null)   {
	    				//System.out.println(line);
	    				subgraph.add(line);
	    			}
	    			//Close the buffer reader
	    			bufferReader.close();
	    	       }
	    		catch(Exception e){
	    	          System.out.println("Error while reading file line by line:" + e.getMessage());                      
	    	       }
	    			    		
	    		String sentence="";String nodes ="";
	    		Integer newSG = 0;
	    		for (String s : subgraph)
	    		{			
	    			if(s.length()>=1 && (!s.contains("digraph")) && (!s.contains("}")))
	    			{				
	    				String ss = s.substring(2,s.length());
	    				
	    				if(newSG.equals(2) && (!ss.contains(" -> ")))
	    				{
	    					subgraph_concat.add(new Vertices(i,sentence.substring(0,sentence.length()-1),""));
	    					sentence = "";
	    				}
	    				
	    				if (!ss.contains(" -> "))				
	    				{
	    					nodes = ss.substring(0,ss.indexOf(" "));
	    					if (nodes.length()>=1)
	    						sentence = sentence + nodes + ";";
	    					newSG = 1;
	    				}
	    				else if (ss.contains(" -> "))
	    				{
	    					nodes = ss.substring(0,ss.indexOf(" ["));
	    					if (nodes.length()>=1)
	    						sentence = sentence + nodes + ";";
	    					newSG = 2;
	    				}
	    												
	    			}
	    			//System.out.println(sentence);
	    		}
	    		subgraph_concat.add(new Vertices(i,sentence.substring(0,sentence.length()-1),""));					    
	        }
	        i++;	           	        
	    }		    
	    
	    System.out.println("---- "+Title + " ----");
	    System.out.println();
	    for (Vertices s : subgraph_concat)
	    	System.out.println(s.getId() + ". " + s.getName() );
	    
	    int sayi =1;
	    String delims ="[;]";
	    final List<String> overlap = new ArrayList<String>();
		for (int j = 0; j < subgraph_concat.size(); j++) 
	    {
			String[] s1 = subgraph_concat.get(j).getName().split(delims);
			for (int k = j+1; k < subgraph_concat.size(); k++)
			{
				String[] s2 = subgraph_concat.get(k).getName().split(delims);
				int count=0;
				for (int l = 0; l < s1.length; l++) 
				{
					for (int l2 = 0; l2 < s2.length; l2++) 
					{
						if(s1[l].equals(s2[l2]))
						{
							count++;
							break;
						}
					}
				}
				
				if (count == s1.length)
				{
					overlap.add(subgraph_concat.get(j).getName());					
					System.out.println("Overlap : " +sayi+". " + subgraph_concat.get(j).getName());
					sayi++;
					break;
				}
			}
		}
		
		final List<String> finalList = new ArrayList<String>();
		for (Vertices v : subgraph_concat)
	    {
			Boolean exists = false;
			for (String s : overlap)
		    {
				if(v.getName().equals(s))
				{
					exists = true;
					break;
				}
		    }
			if(exists==false)
				finalList.add(v.getName());
	    }
		
		sayi =1;
		for (String s : finalList)
	    {
			System.out.println(sayi+". "+ s);
			sayi++;
	    }
		sayi=0;
	}
	
	public void ClearOutputs(File f) throws FileNotFoundException {
		
		final List<String> subgraph = new ArrayList<String>();
	    subgraph.clear();
	    
		FilenameFilter textFilter = new FilenameFilter() {
	        public boolean accept(File dir, String name) {
	            return name.toLowerCase().endsWith(".g");
	        }
	    };
	    
	    String fileName="";
	    
	    File[] files = f.listFiles(textFilter);
	    	    
	    for (File file : files) 
	    {
	    	if (file.isDirectory()) 
	        {
	            System.out.print("directory:");
	        } 
	        else 
	        {
	            //System.out.println("File:"+file.getName());
	            fileName = f + "/" + file.getName();
  
	    		try{

	    			//Create object of FileReader
	    			FileReader inputFile = new FileReader(fileName);
	    			BufferedReader bufferReader = new BufferedReader(inputFile);

	    			String line;
	    			Boolean isRelation = false;
	    			// Read file line by line and print on the console
	    			while ((line = bufferReader.readLine()) != null)   {
		    				if(line.equals("// Subdue 5.2.2 graph in dot format")){
		    					continue;
		    				}
		    				if(line.contains("digraph SubdueGraph {")){
		    					subgraph.add(line);
		    				}
		    				if(line.length()>10 && line.substring(4, 11).equals(" [label") && isRelation.equals(false)){
		    					subgraph.add(line);
		    				}	  
		    				if(line.contains(" -> ")){
		    					isRelation = true;
		    					subgraph.add(line);
		    				}
		    				if(line.length()>10 && line.substring(4, 11).equals(" [label") && isRelation.equals(true)){
		    					subgraph.add("}");
		    					break;
		    				}
	    				}
	    				
	    				PrintWriter writer_out = new PrintWriter(fileName.replace(".g", ".dot"));
	    				for (String s : subgraph) {	    					
	    					writer_out.println(s);
	    				}
	    				writer_out.close();
	    				subgraph.clear();
	    			}
		    	catch(Exception e){
		    	          System.out.println("Error while reading file line by line:" + e.getMessage());                      
		    	       }
	        	}
	    			    		
	    	}
	    
	}

	public void DeleteRedundant(File f){
		String fileName="";
		
		final List<String> subgraph = new ArrayList<String>();		
		final List<Vertices> subgraph_concat = new ArrayList<Vertices>();
		
	    FilenameFilter textFilter = new FilenameFilter() {
	        public boolean accept(File dir, String name) {
	            return name.toLowerCase().endsWith(".g");
	        }
	    };
	    
	    Integer i = 1;
	    File[] files = f.listFiles(textFilter);
	    
	    //silme islemi. 0 instance larÄ± siliyoruz.
	    for (File file : files) 
	    {
	    	subgraph.clear();
	        if (file.isDirectory()) 
	        {
	            System.out.print("directory:");
	        } 
	        else 
	        {
	            //System.out.println("File:"+file.getName());
	            fileName = f + "/" + file.getName();
	    		try{

	    			//Create object of FileReader
	    			FileReader inputFile = new FileReader(fileName);
	    			
	    			BufferedReader bufferReader = new BufferedReader(inputFile);

	    			String line;

	    			// Read file line by line and print on the console
	    			while ((line = bufferReader.readLine()) != null)   {
	    				//System.out.println(line);
	    				subgraph.add(line);
	    			}
	    			//Close the buffer reader
	    			bufferReader.close();
	    	       }
	    		catch(Exception e){
	    	          System.out.println("Error while reading file line by line:" + e.getMessage());                      
	    	       }
	    		
	    		int sayi=1;
	    		for (String s : subgraph)
	    		{			
	    			if(s.length()>=1 && (!s.contains("digraph")) && (!s.contains("}")) && !s.substring(2,3).equals(" "))
	    			{
	    				//System.out.println(s.substring(2,3));
	    				if (Integer.parseInt(s.substring(2,3)) == sayi){
	    					//System.out.println(s.substring(2,3));
	    					//eser 1-9 arass node varsa o zaman bu output 0 instance'lsdsr. Sil!
	    					if(Integer.parseInt(s.substring(2,3)) == 9){
	    						file.delete();
	    						break;
	    					}
	    					sayi++;
	    				}
	    				else break;
	    			}
	    		}
	        }
	    }
	}
	

}

